<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Modules\Plataforma\Models\User;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

class FixUserPermissions extends Command
{
    protected $signature = 'fix:user-permissions {email}';
    protected $description = 'Fix user permissions by ensuring they have the correct role and permissions';

    public function handle()
    {
        $email = $this->argument('email');
        
        $this->info("üîç Buscando usu√°rio: {$email}");
        
        $user = User::where('email', $email)->first();
        
        if (!$user) {
            $this->error("‚ùå Usu√°rio {$email} n√£o encontrado!");
            return 1;
        }
        
        $this->info("‚úÖ Usu√°rio encontrado: {$user->name} (Tenant ID: {$user->tenant_id})");
        
        // Definir contexto do tenant
        setPermissionsTeamId($user->tenant_id);
        
        // Verificar roles atuais
        $currentRoles = $user->getRoleNames();
        $this->info("üìã Roles atuais: " . $currentRoles->implode(', '));
        
        // Buscar role HUB
        $hubRole = Role::where('name', 'HUB')->where('tenant_id', $user->tenant_id)->first();
        
        if (!$hubRole) {
            $this->error("‚ùå Role HUB n√£o encontrada para o tenant {$user->tenant_id}!");
            return 1;
        }
        
        $this->info("‚úÖ Role HUB encontrada: {$hubRole->name}");
        
        // Verificar permiss√µes da role HUB
        $hubPermissions = $hubRole->permissions->pluck('name');
        $this->info("üîê Permiss√µes da role HUB: " . $hubPermissions->implode(', '));
        
        // Atribuir role HUB se necess√°rio
        if (!$user->hasRole('HUB')) {
            $this->info("‚ö†Ô∏è Usu√°rio n√£o tem a role HUB. Atribuindo...");
            $user->assignRole($hubRole);
            $this->info("‚úÖ Role HUB atribu√≠da!");
        } else {
            $this->info("‚úÖ Usu√°rio j√° tem a role HUB");
        }
        
        // Recarregar usu√°rio
        $user = $user->fresh();
        setPermissionsTeamId($user->tenant_id);
        
        // Verificar resultado final
        $finalRoles = $user->getRoleNames();
        $finalPermissions = $user->getAllPermissions()->pluck('name');
        
        $this->info("\nüéØ RESULTADO FINAL:");
        $this->info("üìã Roles: " . $finalRoles->implode(', '));
        $this->info("üîê Permiss√µes: " . $finalPermissions->implode(', '));
        
        // Testar permiss√µes espec√≠ficas
        $requiredPermissions = ['tenants.visualizar', 'usuarios.visualizar', 'perfis.visualizar'];
        $this->info("\nüîç Testando permiss√µes espec√≠ficas:");
        
        foreach ($requiredPermissions as $permission) {
            $hasPermission = $user->can($permission);
            $status = $hasPermission ? "‚úÖ" : "‚ùå";
            $this->info("{$status} {$permission}: " . ($hasPermission ? "SIM" : "N√ÉO"));
        }
        
        $this->info("\n‚úÖ Corre√ß√£o conclu√≠da!");
        return 0;
    }
}
